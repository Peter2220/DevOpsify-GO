go build -o main .

To use local Docker images with Minikube:

Configure Docker to Use Minikube’s Docker Daemon:
Run the following command to point your Docker CLI to Minikube’s Docker daemon:
eval $(minikube -p minikube docker-env)

This command sets up your environment to use the Docker daemon inside Minikube.



docker build -t rocky20/go-web-app:v1 .

docker push rocky20/go-web-app:v1

docker run -p 8080:8080 -it rocky20/go-web-app:v1

kubectl apply -f deployment.yaml --validate=true
kubectl apply -f service.yaml --validate=true
kubectl apply -f ingress.yaml --validate=true

kubectl edit svc/go-app-svc

Set the type to NodePort
____________________________
$ kubectl get svc -o wide
NAME         TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)        AGE
go-app-svc   NodePort    10.102.181.10   <none>        80:30972/TCP   5m7s
kubernetes   ClusterIP   10.96.0.1       <none>        443/TCP        21d

$ kubectl get no -o wide
NAME       STATUS   ROLES           AGE   VERSION   INTERNAL-IP      EXTERNAL-IP   OS-IMAGE              KERNEL-VERSION   CONTAINER-RUNTIME
minikube   Ready    control-plane   21d   v1.28.3   172.27.148.177   <none>        Buildroot 2023.02.9   5.10.207         docker://26.0.2

Access the application locally
http://172.27.148.177:30972/courses


The ingress controller can be installed through minikube's addons system:
minikube addons enable ingress
https://kubernetes.github.io/ingress-nginx/deploy/#minikube

The ingress controller that you use, is a GO program which is written by the Load Balancer Company (AWS/Azure)
It will watch for the Ingress resource and creates a Load Balancer as for the Ingress Config.


In our application, We are telling the Ingress controller, create a LB, when i access the Load balancer at (go-app.local)
It must forward the request to the service (go-app-svc)


$  kubectl get po -n ingress-nginx
NAME                                        READY   STATUS      RESTARTS   AGE
ingress-nginx-admission-create-5cvpl        0/1     Completed   0          2m4s   
ingress-nginx-admission-patch-jrspr         0/1     Completed   0          2m4s   
ingress-nginx-controller-68cd94d4bd-hnh4w   1/1     Running     0          2m4s   

This pod: ingress-nginx-controller-68cd94d4bd-hnh4w   will watch for the ingress resources with the ingressClassName: nginx

$ kubectl get ing
NAME     CLASS   HOSTS          ADDRESS          PORTS   AGE
go-app   nginx   go-app.local   172.27.148.177   80      37m

HELM Installation on Windows
winget install Helm.Helm

___________________________________________________

helm create go-app-chart

Chart.yaml // Info of the Chart
rm -rf templates/*
cp ../../k8s/manifests/* .


vim deployment.yaml

          image: rocky20/go-web-app:{{ .Values.image.tag }}

Then remove everything in the values.yaml file, add the following
image:
  tag: "v1"

cd ..

helm install go-app ./go-app-chart
$ kubectl get all
NAME                          READY   STATUS    RESTARTS   AGE
pod/go-app-84b6c7c48b-kh56q   1/1     Running   0          2m34s

NAME                 TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)   AGE
service/go-app-svc   ClusterIP   10.101.184.148   <none>        80/TCP    2m34s
service/kubernetes   ClusterIP   10.96.0.1        <none>        443/TCP   22d

NAME                     READY   UP-TO-DATE   AVAILABLE   AGE
deployment.apps/go-app   1/1     1            1           2m34s

NAME                                DESIRED   CURRENT   READY   AGE
replicaset.apps/go-app-84b6c7c48b   1         1         1       2m34s


$ helm uninstall go-app

___________________________________________________

CICD PART

CI (GitHub Actions):
 - Build & Test (Unit Test)
 - Static Code Analysis
 - Create Docker image & Push it
 - Update Helm with the Helm with the Created Docker image

 CD:
  - ArgoCD watches for the values.yaml updates, then pulls the Helm Chart and Deploys it to the Kubernetes Cluster
___________________________________________________

ArgoCD Implementation

kubectl create ns argocd
kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml

kubectl patch service/argocd-server -n argocd -p '{"spec": {"type": "LoadBalancer"}}'

Minikube argocd-server stuck in Pending state? 
argocd-server  LoadBalancer   10.109.195.168   <pending>     80:32583/TCP,443:31520/TCP   8m50s

Minikube does not support external LoadBalancers out of the box. Instead, you can use minikube tunnel to create a network route to access the LoadBalancer service.

minikube tunnel

kubectl get no -o wide
Copy the Internal IP address of the node

kubectl get svc -n argocd

Copy the port number, then visit: http://IP:port_number

kubectl get secret -n argocd

$ kubectl edit secret argocd-initial-admin-secret -n argocd

$ echo base64_PASSWORD | base64 --decode

https://IPADDRESS:32583/login